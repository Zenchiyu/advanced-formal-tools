mdp

const double p_bar;
const double interest;
const int v_init;
const int tmax;
const int max_stocks; // number of stocks investor has at the start

// module used to synchronize transitions (time)
module month
    
    m : [0..1];
    time : [0..tmax] init 0;
    is_done : [0..1] init 0; 
    
    // Increment time, and perform transitions for the start of a new month (invest/bar). 
    [invest] (m=0) & (time < tmax) -> (m'=1) & (time'=time+1);
    
    // Perform transitions that occur during the month (time series).
    [month] (m=1) & (time < tmax) & (is_done=0) -> (m'=0);
    
    // If last month, go to absorbing state, cashing in the shares if invested previous month
    [month] ((i=0)|((i=1) &(b=1))) & (m=1) & (time >= tmax) & (is_done=0) -> (is_done'=1);
    [month] (i=1) & (b=0) & (m=1) & (time >= tmax) & (is_done=0) -> (m'=0);
    
    // cash in shares
    [delivery] (m=0) & (time < tmax) & (is_done=0) -> (m'=0); 
    [delivery] (m=0) & (time >= tmax) & (is_done=0) -> (is_done'=1);

    // two end conditions
    [done] (is_done=1) -> (is_done'=1);
    [done] (stocks=0) -> (is_done'=1);
endmodule

// the investor
module investor
    
    stocks: [0..max_stocks] init max_stocks; // number of stocks available to investor
    i : [0..1]; // i=0 no reservation and i=1 made reservation

    [invest] (i=0) -> (i'=0); // do nothing
    [invest] (i=0) & (stocks>0) -> (i'=1); // make reservation
    [invest] (i=1) & (b=1) -> (i'=0); // barred previous month: try again and do nothing
    [invest] (i=1) & (b=1) & (stocks>0) -> (i'=1); // barred previous month: make reservation
    [delivery] (i=1) & (b=0) & (stocks>0)-> (i'=0) & (stocks'=stocks-1); // cash in shares

endmodule

// market barring
module barred

    // b=0 - not barred and b=1 - barred, initially cannot bar
    b : [0..1] init 1;
    
    // do not bar this month
    [invest] (b=1) -> (b'=0);
    // bar this month (cannot have barred the previous month), only when investor did not invest last month 
    [invest] (b=0) & (i=0) -> p_bar: (b'=1) + (1-p_bar): (b'=0);
    // case of b=0 and i=1 never happens because delivery would update i=0
    
endmodule

// value of the shares
module value
    
    v : [0..10] init v_init;

    [month] true -> p/10 : (v'=min(v+1,c)) + (1-p/10) : (v'=min(max(v-1,0),c));

endmodule

// probability of shares going up/down
module probability
    
    p : [0..10] init 5; // probabilitity is p/10 and initially the probability is 1/2

    [month] (v<5) -> 2/3 : (p'=min(p+1,10)) + 1/3 : (p'=max(p-1,0));
    [month] (v=5) -> 1/2 : (p'=min(p+1,10)) + 1/2 : (p'=max(p-1,0));
    [month] (v>5) -> 1/3 : (p'=min(p+1,10)) + 2/3 : (p'=max(p-1,0));

endmodule

// cap on the value of the shares
module cap
    
    c : [0..10] init 10; // cap on the shares
    // probability 1/2 the cap decreases
    [month] true -> 1/2 : (c'=max(c-1,0)) + 1/2 : (c'=c);

endmodule

rewards
    // reward from transition [delivery], accrued monthly interest
    [delivery] true : v * pow(1 + interest, tmax - time);
endrewards

rewards "steps"
    true : 1;
endrewards